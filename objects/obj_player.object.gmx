<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>imageX = 0;
imageY = 0;
pressed = false;
rings = 0;

inFastWarp = false;
inSlowWarp = false;

dust = 4;

image_alpha = 0;

badge = 0;

stuck = false;
var stuckWall;
stuckWallX = 0;
stuckWallY = 0;
gravField = false;

canceled = false;

initialX = 0;
initialY = 0;

finalX = 0;
finalY = 0;

deltaX = finalX - initialX;
deltaY = finalY - initialY;

spawnX = 0;
spawnY = 0;

spawnHSpeed = 0;
spawnVSpeed = 0;
spawnAngular = 0;

gravAngle = 0;

forceFactor = 1.43;

test = 0;
ringType = spr_ring;

var ball;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if image_alpha &lt; 1 &amp;&amp; phy_active = true {
    image_alpha += 0.04;
    global.transition = false;
}

if !physics_test_overlap(phy_position_x, phy_position_y + 3, phy_rotation, obj_wall) &amp;&amp; !physics_test_overlap(phy_position_x, phy_position_y - 3, phy_rotation, obj_wall) &amp;&amp; !physics_test_overlap(phy_position_x + 3, phy_position_y, phy_rotation, obj_wall) &amp;&amp; !physics_test_overlap(phy_position_x - 3, phy_position_y, phy_rotation, obj_wall) {
    if !physics_test_overlap(phy_position_x, phy_position_y + 3, phy_rotation, obj_gravBallCenter) &amp;&amp; !physics_test_overlap(phy_position_x, phy_position_y - 3, phy_rotation, obj_gravBallCenter) &amp;&amp; !physics_test_overlap(phy_position_x + 3, phy_position_y, phy_rotation, obj_gravBallCenter) &amp;&amp; !physics_test_overlap(phy_position_x - 3, phy_position_y, phy_rotation, obj_gravBallCenter) {
        if !physics_test_overlap(phy_position_x, phy_position_y + 3, phy_rotation, obj_debris) &amp;&amp; !physics_test_overlap(phy_position_x, phy_position_y - 3, phy_rotation, obj_debris) &amp;&amp; !physics_test_overlap(phy_position_x + 3, phy_position_y, phy_rotation, obj_debris) &amp;&amp; !physics_test_overlap(phy_position_x - 3, phy_position_y, phy_rotation, obj_debris) {
            dust = 4;
        }
    }
}

if phy_active = true &amp;&amp; !instance_exists(obj_pauser) {
    image_angle = phy_rotation;
    if rings &gt; 0 {
        ring = instance_create(x, y, obj_ring);
        ring.phy_rotation = radtodeg(arctan2(phy_linear_velocity_y, phy_linear_velocity_x));
        ring.strength = sqr(rings + 1) / sqrt(sqr(phy_linear_velocity_x) + sqr(phy_linear_velocity_y));
        rings -= 1;
        ring.sprite_index = ringType;
    }
    
    forceFactor = 1.43;
    
    if global.slings &gt; 0 &amp;&amp; global.slings &lt;= 4 {
        sprite_index = spr_player;
    } else if global.slings &gt; 4 {
        sprite_index = spr_redPlayer;
        forceFactor = 1.57;
    } else if global.slings = 0 {
        sprite_index = spr_dead;
    }

    if place_meeting(x, y, obj_fastWarp) &amp;&amp; inFastWarp = false {
        inFastWarp = true;
        audio_play_sound(snd_fastWarp, 1, false);
        phy_linear_velocity_x *= 4;
        phy_linear_velocity_y *= 4;
    }
    
    if place_meeting(x, y, obj_slowWarp) &amp;&amp; inSlowWarp = false {
        inSlowWarp = true;
        audio_play_sound(snd_slowWarp, 1, false);
        phy_linear_velocity_x /= 2.5;
        phy_linear_velocity_y /= 2.5;
    }

    if global.respawned = true {
        phy_linear_velocity_x = spawnHSpeed;
        phy_linear_velocity_y = spawnVSpeed;
        global.respawned = false;
    }
    
    if device_mouse_check_button_pressed(0, mb_left) &amp;&amp; global.transition = false &amp;&amp; global.inLS = false {
        initialX = device_mouse_raw_x(0);
        initialY = device_mouse_raw_y(0);
        canceled = false;
        pressed = true;
        if global.slings &gt; 0 {
            audio_play_sound(snd_hum, 1, true);
        }
    }

    if global.slings &gt; 0 &amp;&amp; !instance_exists(obj_pauser) {
        if !place_meeting(x, y, obj_gravParent) {
            gravField = false;
        }
    
        if device_mouse_check_button(0, mb_left) &amp;&amp; global.transition = false &amp;&amp; pressed = true {
            phy_linear_velocity_x = 0;
            phy_linear_velocity_y = 0;
            finalX = device_mouse_raw_x(0);
            finalY = device_mouse_raw_y(0);
            phy_rotation = radtodeg(arctan2(initialY - finalY, initialX - finalX)) + 90;
            deltaX = initialX - finalX;
            deltaY = initialY - finalY;
            audio_sound_pitch(snd_hum, sqrt(sqr(deltaX) + sqr(deltaY)) / 180);
            shudder = sqrt(sqr(deltaX) + sqr(deltaY));
            if gravField = true {
                shudder *= 1.5;
            }
            imageX = random_range(-shudder / 420, shudder / 420);
            imageY = random_range(-shudder / 420, shudder / 420);
        } else if room = rm_menu {
            phy_rotation = 0;
        }
        
        if device_mouse_check_button_released(0, mb_left) {
            audio_stop_sound(snd_hum);
        }
        
        if device_mouse_check_button_released(0, mb_left) &amp;&amp; canceled = false &amp;&amp; pressed = true &amp;&amp; sqrt(sqr(deltaX) + sqr(deltaY)) &gt; 27 {
            stuck = false;
            pressed = false;
            imageX = 0;
            imageY = 0;
            if room = rm_game or room = rm_test {
                physics_apply_impulse(x, y, deltaX * forceFactor, deltaY * forceFactor);
                audio_play_sound(snd_zoom, 1, false);
                audio_sound_pitch(snd_zoom, phy_speed / 18);
                rings = ceil(0.02 * sqrt(sqr(deltaX) + sqr(deltaY)));
                if sprite_index = spr_player {
                    ringType = spr_ring;
                } else if sprite_index = spr_redPlayer {
                    ringType = spr_ring2;
                }
                if global.transition = false {
                    global.slings -= 1;
                }
                inFastWarp = false;
                inSlowWarp = false;
            }
            if room = rm_menu &amp;&amp; global.transition = false &amp;&amp; global.inLS = false {
                deltaX = initialX - finalX;
                deltaY = initialY - finalY;
                physics_apply_impulse(x, y, deltaX * forceFactor, deltaY * forceFactor);
                audio_play_sound(snd_zoom, 1, false);
                audio_sound_pitch(snd_zoom, phy_speed / 18);
                rings = ceil(0.02 * sqrt(sqr(deltaX) + sqr(deltaY)));
                if sprite_index = spr_player {
                    ringType = spr_ring;
                } else if sprite_index = spr_redPlayer {
                    ringType = spr_ring2;
                }
                spawnHSpeed = phy_linear_velocity_x;
                spawnVSpeed = phy_linear_velocity_y;
                spawnX = x
                spawnY = room_height - ((view_yview[0] + 1334) - y)
                global.respawned = true;
                room_goto(rm_game);
            }
            if global.transition = true {
                if instance_exists(obj_camFollow) {
                    if obj_camFollow.velocity = 0 {
                        global.transition = false;
                    }
                } else {
                    global.transition = false;
                }
            }
        }
    }
    
    if device_mouse_check_button(1, mb_left) {
        canceled = true;
    }
} else {
    if !instance_exists(obj_restart) {
        instance_create(375, view_yview[0] + 960, obj_restart);
    }
}

if room = rm_credits {
    phy_linear_velocity_x = 0;
    phy_linear_velocity_y = -125;
}

if global.slings &lt;= 0 {
    if !instance_exists(obj_restart) {
        instance_create(375, view_yview[0] + 960, obj_restart);
    }
}

if stuck = true { //sticking to moving sticky walls
    phy_position_x = stuckWall.x + stuckWallX;
    phy_position_y = stuckWall.y + stuckWallY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_charge">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.slings += other.charge;
with (other) {
    charge = 0;
}
if other.object_index = obj_charge {
    instance_create(phy_position_x, phy_position_y, obj_charged);
    audio_play_sound(snd_charge, 1, false);
} else if other.object_index = obj_superCharge {
    instance_create(phy_position_x, phy_position_y, obj_redCharged);
    audio_play_sound(snd_superCharge, 1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gravBallCenterE">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics collision
if dust = 4 {
    for (i = 1; i &lt;= irandom_range(8, 12); i++) {
        dust = instance_create(phy_collision_x + irandom_range(-2, 2), phy_collision_y + irandom_range(-2, 2), obj_dust);
        dust.sprite_index = spr_dust4;
    }
    global.slings = 0;
    dust = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gravBall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics collision
global.inGrav = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gravBallCenter">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics collision
if dust = 4 {
    for (i = 1; i &lt;= irandom_range(8, 12); i++) {
        dust = instance_create(phy_collision_x + irandom_range(-2, 2), phy_collision_y + irandom_range(-2, 2), obj_dust);
        dust.sprite_index = spr_dust4;
    }
    dust = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_gravParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shrapnel">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.image_alpha &gt;= 1 {
    scr_destruction();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_destruction();
with (other) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_deadly">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_destruction();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_debris">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics collision
if dust = 4 {
    for (i = 1; i &lt;= irandom_range(4, 6); i++) {
        dust = instance_create(phy_collision_x + irandom_range(-2, 2), phy_collision_y + irandom_range(-2, 2), obj_dust);
        dust.sprite_index = spr_dust2;
    }
    audio_play_sound(snd_hitDebris, 1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shrapnelC">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///physics collision
if dust = 4 {
    for (i = 1; i &lt;= irandom_range(8, 12); i++) {
        dust = instance_create(phy_collision_x + irandom_range(-2, 2), phy_collision_y + irandom_range(-2, 2), obj_dust);
        if other.object_index = obj_redWall or other.object_index = obj_redWall3 {
            dust.sprite_index = spr_dust;
            audio_play_sound(snd_bouncyImpact, 1, false);
        }
        if other.object_index = obj_deadWall or other.object_index = obj_deadWall3 {
            dust.sprite_index = spr_dust1;
            audio_play_sound(snd_deadImpact, 1, false);
        }
        if other.object_index = obj_bounceableWall or other.object_index = obj_bounceableWall3 {
            dust.sprite_index = spr_dust2;
            audio_play_sound(snd_regularImpact, 1, false);
        }
        if other.object_index = obj_antikineticWall or other.object_index = obj_antiKineticWall3 {
            dust.sprite_index = spr_dust3;
            audio_play_sound(snd_stickyImpact, 1, false);
        }
        if other.object_index = obj_electrifiedWall or other.object_index = obj_electrifiedWall3 {
            dust.sprite_index = spr_dust4;
        }
    }
    dust = 3;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_detection">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spawnHSpeed = phy_linear_velocity_x;
spawnVSpeed = phy_linear_velocity_y;
spawnX = x
spawnY = room_height - ((view_yview[0] + 1334) - (view_yview[0] + y))
global.respawned = true;

if global.slings &lt;= 3 {
    instance_create(phy_position_x, phy_position_y, obj_charged);
}
if global.slings &gt; 3 {
    instance_create(phy_position_x, phy_position_y, obj_discharged);
}

if global.tutorial = false {
    if global.level + 1 &gt; global.maxLevel {
        global.maxLevel += 1;
    }
    if global.slings &lt; global.levels[global.level,2] {
        badge = 1;
        if global.levels[global.level,1] &lt; badge {
            global.currency += 5;
            global.levels[global.level,1] = badge;
        }
    }
    if global.slings &gt;= global.levels[global.level,2] {
        badge = 2;
        if global.levels[global.level,1] &lt; badge {
            global.currency += 5;
            global.levels[global.level,1] = badge;
        }
    }
    if global.slings &gt; 1 + global.levels[global.level,2] {
        badge = 3;
        if global.levels[global.level,1] &lt; badge {
            global.currency += 10;
            global.levels[global.level,1] = badge;
        }
    }
    if global.slings &gt; 2 + global.levels[global.level,2] {
        badge = 4;
        if global.levels[global.level,1] &lt; badge {
            global.currency += 15;
            global.levels[global.level,1] = badge;
        }
    }
}

global.slings = 3;

if global.tutorial = true {
    global.inPlay = false;
    global.tutorial = false;
    room_goto(rm_menu);
    instance_destroy();
    scr_save();
} else {
    if global.level = 31 {
        global.inPlay = false;
        room_goto(rm_menu);
        instance_destroy();
        scr_save();
    } else if global.level = 30 &amp;&amp; room = rm_game {
        room_goto(rm_credits);
        global.inPlay = true;
        scr_save();
    } else if room = rm_credits {
        global.inPlay = false;
        room_goto(rm_menu);
        instance_destroy();
        scr_save();
    } else {
        room_restart();
        global.inPlay = true;
        global.level += 1;
        scr_save();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rm_game or room = rm_test {
    x = spawnX;
    y = spawnY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.inPlay = false;

if room != rm_menu {
    global.transition = false;
}

badge = 0;

if room = rm_test {
    phy_position_y = room_height - 400;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white);

lineColor = c_aqua;

if sprite_index = spr_redPlayer {
    lineColor = c_red;
}

if global.tutorial = true {
    draw_set_font(ft_description);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_text(375, 10405, "Slide down to aim#Release to go");
    draw_text(375, 7272, "Collect charges to refill energy");
    draw_text(375, 5322, "Press and hold to stop and aim");
    draw_text(375, 1421, "Conserve charges to earn medals");
}

if room = rm_credits {
    draw_set_font(ft_description);
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_text(375, 9338 - (17 * 155), "Chief Developer:#Kevin Liu");
    draw_text(375, 9338 - (15 * 155), "Lead Artist:#Madeline Overton");
    draw_text(375, 9338 - (13 * 155), "Lead Designer:#Jason Bickmore");
    draw_text(375, 9338 - (11 * 155), "Level Designer and Artist:#Levi Kaplan");
    draw_text(375, 9338 - (9 * 155), "Level Designer:#Brandon Weaver");
    draw_text(375, 9338 - (7 * 155), "Music Producer:#Dominick Giuntini");
    draw_text(375, 9338 - (5 * 155), "Level Designer:#Isaac Ankeny");
    draw_text(375, 9338 - (3 * 155), "Developer:#Nicholas Schumann");
    draw_text(375, 9338 - (1 * 155), "Artist:#Gunnar Nye");
    draw_text(375, 9338 - (20 * 155), "Thank you for taking the time#to play through our game,#Lost Space");
    draw_text(375, 9338 - (23 * 155), "This game was made#entirely by a team of#nine high school students");
    draw_text(375, 9338 - (26 * 155), "By playing this game, you support#our dreams#and youth entrepreneurship");
    draw_text(375, 9338 - (29 * 155), "Lost Space took ten months to make,#but it was the culmination of#three years of trial and error");
    draw_text(375, 9338 - (32 * 155), "Many thanks to our parents#for supporting us,#especially to our benefactor,#Hongguang Liu");
    draw_text(375, 9338 - (35 * 155), "A special thanks to Sean Bird,#who has been a constant voice of#support and encouragement");
    draw_text(375, 9338 - (38 * 155), "Thank you zapsplat.com for providing#many of our sound effects");
    draw_text(375, 9338 - (41 * 155), "And a big thanks to YOU#for playing our game");
    draw_text(375, 9338 - (44 * 155), "You can help us even further#by writing a review for Lost Space");
    draw_text(375, 9338 - (47 * 155), "We would greatly appreciate#any and all of your feedback");
    draw_text(375, 9338 - (50 * 155), "Thank you so much,#and we hope you enjoyed");
    draw_set_font(ft_charge);
    draw_text(375, 9338 - (51 * 155), "LOST SPACE");
}

if device_mouse_check_button(0, mb_left) &amp;&amp; canceled = false &amp;&amp; global.slings &gt; 0 &amp;&amp; global.transition = false &amp;&amp; phy_active = true &amp;&amp; global.inLS = false &amp;&amp; !instance_exists(obj_pauser) {
    draw_line_width_colour(phy_position_x, phy_position_y, phy_position_x + (initialX - finalX), phy_position_y + (initialY - finalY), 8, lineColor, c_white);
}

draw_sprite_ext(sprite_index, image_index, phy_position_x + imageX, phy_position_y + imageY, 1, 1, image_angle, c_white, image_alpha);

draw_set_font(ft_charge);
draw_set_valign(fa_center);
draw_set_halign(fa_center);

if phy_active = true {
    draw_text(phy_position_x, phy_position_y - 64, global.slings);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.200000002980232</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.0500000007450581</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>29,27</point>
    <point>27,27</point>
  </PhysicsShapePoints>
</object>
