<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_guardSentry</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_debris</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
armed = false;
reloadTime = 3 * room_speed;
reload = reloadTime;
status = 1;
rotationSpeed = 3;

death = -1;
hydraulics = false;
image_angle = irandom_range(0, 359);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

while image_angle &gt; 360 {
    image_angle -= 360;
}

while image_angle &lt; 0 {
    image_angle += 360;
}

if distance_to_object(obj_player) &lt;= 445 &amp;&amp; death = -1 &amp;&amp; obj_player.phy_active = true &amp;&amp; !instance_exists(obj_pauser)  {
    targetRotation = point_direction(x, y, obj_player.x, obj_player.y);
    if abs(image_angle - targetRotation) &lt; 4 {
        image_angle = targetRotation;
    } else {
        if image_angle &gt; 180 {
            if targetRotation &gt; 180 {
                if targetRotation &gt; image_angle {
                    image_angle += rotationSpeed;
                } else {
                    image_angle -= rotationSpeed;
                }
            } else {
                if image_angle - 180 &gt; targetRotation {
                    image_angle += rotationSpeed;
                } else {
                    image_angle -= rotationSpeed;
                }
            }
        } else {
            if targetRotation &lt; 180 {
                if targetRotation &gt; image_angle {
                    image_angle += rotationSpeed;
                } else {
                    image_angle -= rotationSpeed;
                }
            } else {
                if image_angle + 180 &gt; targetRotation {
                    image_angle += rotationSpeed;
                } else {
                    image_angle -= rotationSpeed;
                }
            }
        }
    }
    if reload &gt; 0 {
        reload -= 1;
        if reload = 180 {
            audio_play_sound(snd_guardCharge1, 1, false);
        }
        if reload = 120 {
            audio_play_sound(snd_guardCharge2, 1, false);
        }
        if reload = 60 {
            audio_play_sound(snd_guardCharge3, 1, false);
        }
        switch (ceil(reload / room_speed)) {
            case 3:
            status = 2;
            break;
            
            case 2:
            status = 3;
            break;
            
            case 1:
            status = 4;
            break;
        }
    } else {
        reload = reloadTime;
        bullet = instance_create(x + cos(degtorad(phy_rotation)) * 90, y + sin(degtorad(phy_rotation)) * 90, obj_bullet);
        bullet.master = self;
        audio_play_sound(snd_guardFiring, 1, false);
    }
}

if death = -1 {
    if distance_to_object(obj_player) &gt; 445 or obj_player.phy_active = false {
        image_angle += 1;
        if reload &lt; reloadTime {
            reload += 1;
        }
        status = 1;
    }
    phy_rotation = -image_angle;
}

if death &gt; 0 {
    status = 0;
    death -= 1;
    if instance_exists(obj_pauser) {
        death += 1;
    }
} else if death = 0 {
    scr_guardShrapnel();
}

scr_hydraulics();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.master != self {
    if death = -1 {
        death = 0 * room_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_player">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if death = -1 {
    death = 2 * room_speed;
    audio_play_sound(snd_hitGuard, 1, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
draw_sprite_ext(spr_guardStatus, status, x, y, 1, 1, image_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1.10000002384186</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>76,76</point>
    <point>76,92</point>
  </PhysicsShapePoints>
</object>
