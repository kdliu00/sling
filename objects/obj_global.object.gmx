<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///initialize variables

randomize();

global.SAVERESET = false;

global.leftRating = false;
ran = 20000;

global.sfxMute = false;
global.musicMute = false;

device_mouse_dbclick_enable(false);
global.slings = 3;
global.inPlay = false;

global.level = 1;
global.maxLevel = 1;
global.highestLevel = 31;

global.transition = false;

global.respawned = false;

global.levelChosen = false;
global.sectorChoose = 1;
global.tutorial = true;

global.currency = 9999;

scr_levels();
scr_colors();

global.inLS = false;

global.shopScroll = 0;

global.mousePressX = 0;
global.mouseX = 0;
global.mouseY = 0;
global.oMouseX = 0;
global.oMouseY = 0;
global.swiped = false;
global.mouseSpeed = 0;
global.deceleration = 0.8;
global.offset = 0;

time = 0;
pressed = false;
image_alpha = 0;
delay = 1.5 * room_speed;

scr_load();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main
if room = rm_boot {
    if image_alpha &lt; 1 &amp;&amp; delay &gt; 0 {
        image_alpha += 0.02;
    } else if delay &lt; 1 {
        image_alpha -= 0.02;
        if image_alpha &lt;= 0 {
            room_goto(rm_menu);
        }
    } else {
        delay -= 1;
    }
}

if !audio_group_is_loaded(audiogroup_music) &amp;&amp; global.musicMute = false {
    audio_group_load(audiogroup_music);
}
if !audio_group_is_loaded(audiogroup_sfx) &amp;&amp; global.sfxMute = false {
    audio_group_load(audiogroup_sfx);
}

if global.inLS = true &amp;&amp; global.transition = false {
    if global.mouseSpeed != 0 {
        global.mouseSpeed -= global.deceleration;
    }
    if device_mouse_check_button_pressed(0, mb_left) {
        global.swiped = false;
        global.mouseSpeed = 0;
        global.oMouseX = device_mouse_raw_x(0);
        global.oMouseY = device_mouse_raw_y(0);
        global.mousePressX = device_mouse_raw_x(0);
        time = 0;
        pressed = true;
    }
    if device_mouse_check_button(0, mb_left) &amp;&amp; pressed = true {
        global.mouseX = device_mouse_raw_x(0);
        global.mouseY = device_mouse_raw_y(0);
        if point_distance(global.oMouseX, global.oMouseY, global.mouseX, global.mouseY) &gt;= 16 {
            global.swiped = true;
        }
        global.offset = global.mouseX - global.mousePressX
        time += 1;
    }
    global.offset = global.mousePressX - global.mouseX;
    if device_mouse_check_button_released(0, mb_left) &amp;&amp; pressed = true {
        pressed = false;
        global.mouseSpeed = 0.8 * ceil((global.mouseX - global.mousePressX) / time);
        if global.mouseSpeed != 0 {
            global.deceleration = sign(global.mouseSpeed) * abs(global.deceleration);
        }
    }
}

if !instance_exists(obj_player) &amp;&amp; room != rm_boot &amp;&amp; !instance_exists(obj_pauser) {
    instance_create(375, 10272, global.chosen);
}

if room = rm_menu {
    if global.leftRating = false &amp;&amp; global.maxLevel &gt; 10 &amp;&amp; ran &lt; 0 {
        if os_type = os_ios {
            if shop_leave_rating("Thanks for playing our game! How about leaving a quick review?", "Sure!", "Later", "https://itunes.apple.com/app/id{1276031416}?action=write-review") {
                global.leftRating = true;
                scr_save();
            }
        } else if os_type = os_android {
            if shop_leave_rating("Thanks for playing our game! How about leaving a quick review?", "Sure!", "Later", "https://play.google.com/store/apps/details?id=com.tangentgamestudios.lostspace") {
                global.leftRating = true;
                scr_save();
            }
        }
        scr_save()
        ran = 20000
    }
}

if global.leftRating = false {
    ran -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///music controls
if room != rm_boot {

if global.musicMute = true {
    audio_group_set_gain(audiogroup_music, 0, 0);
}

if room = rm_menu or global.tutorial = true {
    if !audio_is_playing(snd_menu) {
        audio_play_sound(snd_menu, 1, true);
        audio_sound_gain(snd_menu, 0, 0);
        audio_sound_gain(snd_menu, 0.4, 500);
    } else {
        audio_sound_gain(snd_menu, 0.4, 500);
    }
    
    //check other sound
    if audio_is_playing(snd_upbeat) {
        audio_sound_gain(snd_upbeat, 0, 500);
        if audio_sound_get_gain(snd_upbeat) = 0 {
            audio_stop_sound(snd_upbeat);
        }
    }
    if audio_is_playing(snd_takeoff) {
        audio_sound_gain(snd_takeoff, 0, 500);
        if audio_sound_get_gain(snd_takeoff) = 0 {
            audio_stop_sound(snd_takeoff);
        }
    }
    if audio_is_playing(snd_trap) {
        audio_sound_gain(snd_trap, 0, 500);
        if audio_sound_get_gain(snd_trap) = 0 {
            audio_stop_sound(snd_trap);
        }
    }
    if audio_is_playing(snd_groove) {
        audio_sound_gain(snd_groove, 0, 500);
        if audio_sound_get_gain(snd_groove) = 0 {
            audio_stop_sound(snd_groove);
        }
    }
    if audio_is_playing(snd_contemplate) {
        audio_sound_gain(snd_contemplate, 0, 500);
        if audio_sound_get_gain(snd_contemplate) = 0 {
            audio_stop_sound(snd_contemplate);
        }
    }
    if audio_is_playing(snd_twinkle) {
        audio_sound_gain(snd_twinkle, 0, 500);
        if audio_sound_get_gain(snd_twinkle) = 0 {
            audio_stop_sound(snd_twinkle);
        }
    }
} else {
    if audio_is_playing(snd_menu) &amp;&amp; room != rm_menu {
        audio_sound_gain(snd_menu, 0, 500);
        if audio_sound_get_gain(snd_menu) = 0 {
            audio_stop_sound(snd_menu);
        }
    }
}

if room = rm_game &amp;&amp; global.tutorial = false {
    if global.level &gt;= 1 &amp;&amp; global.level &lt;= 5 {
        if !audio_is_playing(snd_upbeat) {
            audio_play_sound(snd_upbeat, 1, true);
            audio_sound_gain(snd_upbeat, 0, 0);
            audio_sound_gain(snd_upbeat, 0.4, 500);
        } else if obj_player.phy_active = true {
            audio_sound_gain(snd_upbeat, 0.4, 500);
            if audio_sound_get_pitch(snd_upbeat) &lt; 1 {
                audio_sound_pitch(snd_upbeat, audio_sound_get_pitch(snd_upbeat) + 0.02);
            }
            if obj_player.gravField = true &amp;&amp; audio_sound_get_pitch(snd_upbeat) &lt; 1.1 {
                audio_sound_pitch(snd_upbeat, audio_sound_get_pitch(snd_upbeat) + 0.02);
            }
            if obj_player.gravField = false &amp;&amp; audio_sound_get_pitch(snd_upbeat) &gt; 1 {
                audio_sound_pitch(snd_upbeat, audio_sound_get_pitch(snd_upbeat) - 0.02);
            }
        }
        if obj_player.phy_active = false {
            audio_sound_gain(snd_upbeat, 0, 250);
        } else if global.slings = 0 {
            audio_sound_gain(snd_upbeat, 0.2, 250);
            if audio_sound_get_pitch(snd_upbeat) &gt; 0.1 {
                audio_sound_pitch(snd_upbeat, audio_sound_get_pitch(snd_upbeat) - 0.02);
            }
        }
    }
    
    if global.level &gt;= 6 &amp;&amp; global.level &lt;= 10 {
        if !audio_is_playing(snd_takeoff) {
            audio_play_sound(snd_takeoff, 1, true);
            audio_sound_gain(snd_takeoff, 0, 0);
            audio_sound_gain(snd_takeoff, 0.4, 500);
        } else if obj_player.phy_active = true {
            audio_sound_gain(snd_takeoff, 0.4, 500);
            if audio_sound_get_pitch(snd_takeoff) &lt; 1 {
                audio_sound_pitch(snd_takeoff, audio_sound_get_pitch(snd_takeoff) + 0.02);
            }
            if obj_player.gravField = true &amp;&amp; audio_sound_get_pitch(snd_takeoff) &lt; 1.1 {
                audio_sound_pitch(snd_takeoff, audio_sound_get_pitch(snd_takeoff) + 0.02);
            }
            if obj_player.gravField = false &amp;&amp; audio_sound_get_pitch(snd_takeoff) &gt; 1 {
                audio_sound_pitch(snd_takeoff, audio_sound_get_pitch(snd_takeoff) - 0.02);
            }
        }
        if obj_player.phy_active = false {
            audio_sound_gain(snd_takeoff, 0, 250);
        } else if global.slings = 0 {
            audio_sound_gain(snd_takeoff, 0.2, 250);
            if audio_sound_get_pitch(snd_takeoff) &gt; 0.1 {
                audio_sound_pitch(snd_takeoff, audio_sound_get_pitch(snd_takeoff) - 0.02);
            }
        }
        if audio_is_playing(snd_upbeat) {
            audio_sound_gain(snd_upbeat, 0, 500);
            if audio_sound_get_gain(snd_upbeat) = 0 {
                audio_stop_sound(snd_upbeat);
            }
        }
    }
    
    if global.level &gt;= 11 &amp;&amp; global.level &lt;= 15 {
        if !audio_is_playing(snd_trap) {
            audio_play_sound(snd_trap, 1, true);
            audio_sound_gain(snd_trap, 0, 0);
            audio_sound_gain(snd_trap, 0.4, 500);
        } else if obj_player.phy_active = true {
            audio_sound_gain(snd_trap, 0.4, 500);
            if audio_sound_get_pitch(snd_trap) &lt; 1 {
                audio_sound_pitch(snd_trap, audio_sound_get_pitch(snd_trap) + 0.02);
            }
            if obj_player.gravField = true &amp;&amp; audio_sound_get_pitch(snd_trap) &lt; 1.1 {
                audio_sound_pitch(snd_trap, audio_sound_get_pitch(snd_trap) + 0.02);
            }
            if obj_player.gravField = false &amp;&amp; audio_sound_get_pitch(snd_trap) &gt; 1 {
                audio_sound_pitch(snd_trap, audio_sound_get_pitch(snd_trap) - 0.02);
            }
        }
        if obj_player.phy_active = false {
            audio_sound_gain(snd_trap, 0, 250);
        } else if global.slings = 0 {
            audio_sound_gain(snd_trap, 0.2, 250);
            if audio_sound_get_pitch(snd_trap) &gt; 0.1 {
                audio_sound_pitch(snd_trap, audio_sound_get_pitch(snd_trap) - 0.02);
            }
        }
        if audio_is_playing(snd_takeoff) {
            audio_sound_gain(snd_takeoff, 0, 500);
            if audio_sound_get_gain(snd_takeoff) = 0 {
                audio_stop_sound(snd_takeoff);
            }
        }
    }
    
    if global.level &gt;= 16 &amp;&amp; global.level &lt;= 20 {
        if !audio_is_playing(snd_groove) {
            audio_play_sound(snd_groove, 1, true);
            audio_sound_gain(snd_groove, 0, 0);
            audio_sound_gain(snd_groove, 0.4, 500);
        } else if obj_player.phy_active = true {
            audio_sound_gain(snd_groove, 0.4, 500);
            if audio_sound_get_pitch(snd_groove) &lt; 1 {
                audio_sound_pitch(snd_groove, audio_sound_get_pitch(snd_groove) + 0.02);
            }
            if obj_player.gravField = true &amp;&amp; audio_sound_get_pitch(snd_groove) &lt; 1.1 {
                audio_sound_pitch(snd_groove, audio_sound_get_pitch(snd_groove) + 0.02);
            }
            if obj_player.gravField = false &amp;&amp; audio_sound_get_pitch(snd_groove) &gt; 1 {
                audio_sound_pitch(snd_groove, audio_sound_get_pitch(snd_groove) - 0.02);
            }
        }
        if obj_player.phy_active = false {
            audio_sound_gain(snd_groove, 0, 250);
        } else if global.slings = 0 {
            audio_sound_gain(snd_groove, 0.2, 250);
            if audio_sound_get_pitch(snd_groove) &gt; 0.1 {
                audio_sound_pitch(snd_groove, audio_sound_get_pitch(snd_groove) - 0.02);
            }
        }
        if audio_is_playing(snd_trap) {
            audio_sound_gain(snd_trap, 0, 500);
            if audio_sound_get_gain(snd_trap) = 0 {
                audio_stop_sound(snd_trap);
            }
        }
    }
    
    if global.level &gt;= 21 &amp;&amp; global.level &lt;= 25 {
        if !audio_is_playing(snd_contemplate) {
            audio_play_sound(snd_contemplate, 1, true);
            audio_sound_gain(snd_contemplate, 0, 0);
            audio_sound_gain(snd_contemplate, 0.4, 500);
        } else if obj_player.phy_active = true {
            audio_sound_gain(snd_contemplate, 0.4, 500);
            if audio_sound_get_pitch(snd_contemplate) &lt; 1 {
                audio_sound_pitch(snd_contemplate, audio_sound_get_pitch(snd_contemplate) + 0.02);
            }
            if obj_player.gravField = true &amp;&amp; audio_sound_get_pitch(snd_contemplate) &lt; 1.1 {
                audio_sound_pitch(snd_contemplate, audio_sound_get_pitch(snd_contemplate) + 0.02);
            }
            if obj_player.gravField = false &amp;&amp; audio_sound_get_pitch(snd_contemplate) &gt; 1 {
                audio_sound_pitch(snd_contemplate, audio_sound_get_pitch(snd_contemplate) - 0.02);
            }
        }
        if obj_player.phy_active = false {
            audio_sound_gain(snd_contemplate, 0, 250);
        } else if global.slings = 0 {
            audio_sound_gain(snd_contemplate, 0.2, 250);
            if audio_sound_get_pitch(snd_contemplate) &gt; 0.1 {
                audio_sound_pitch(snd_contemplate, audio_sound_get_pitch(snd_contemplate) - 0.02);
            }
        }
        if audio_is_playing(snd_groove) {
            audio_sound_gain(snd_groove, 0, 500);
            if audio_sound_get_gain(snd_groove) = 0 {
                audio_stop_sound(snd_groove);
            }
        }
    }
    
    if global.level &gt;= 26 &amp;&amp; global.level &lt;= 30 {
        if !audio_is_playing(snd_twinkle) {
            audio_play_sound(snd_twinkle, 1, true);
            audio_sound_gain(snd_twinkle, 0, 0);
            audio_sound_gain(snd_twinkle, 0.4, 500);
        } else if obj_player.phy_active = true {
            audio_sound_gain(snd_twinkle, 0.4, 500);
            if audio_sound_get_pitch(snd_twinkle) &lt; 1 {
                audio_sound_pitch(snd_twinkle, audio_sound_get_pitch(snd_twinkle) + 0.02);
            }
            if obj_player.gravField = true &amp;&amp; audio_sound_get_pitch(snd_twinkle) &lt; 1.1 {
                audio_sound_pitch(snd_twinkle, audio_sound_get_pitch(snd_twinkle) + 0.02);
            }
            if obj_player.gravField = false &amp;&amp; audio_sound_get_pitch(snd_twinkle) &gt; 1 {
                audio_sound_pitch(snd_twinkle, audio_sound_get_pitch(snd_twinkle) - 0.02);
            }
        }
        if obj_player.phy_active = false {
            audio_sound_gain(snd_twinkle, 0, 250);
        } else if global.slings = 0 {
            audio_sound_gain(snd_twinkle, 0.2, 250);
            if audio_sound_get_pitch(snd_twinkle) &gt; 0.1 {
                audio_sound_pitch(snd_twinkle, audio_sound_get_pitch(snd_twinkle) - 0.02);
            }
        }
        if audio_is_playing(snd_contemplate) {
            audio_sound_gain(snd_contemplate, 0, 500);
            if audio_sound_get_gain(snd_contemplate) = 0 {
                audio_stop_sound(snd_contemplate);
            }
        }
    }
}

if room = rm_credits {
    if audio_is_playing(snd_twinkle) {
        audio_sound_gain(snd_twinkle, 0, 500);
        if audio_sound_get_gain(snd_twinkle) = 0 {
            audio_stop_sound(snd_twinkle);
        }
    }
    if !audio_is_playing(snd_upbeat) {
        audio_play_sound(snd_upbeat, 1, true);
        audio_sound_gain(snd_upbeat, 0, 0);
        audio_sound_gain(snd_upbeat, 0.4, 500);
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_save();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_save();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///RESET SAVE FILE
if file_exists("ls.sav") {
    file_delete("ls.sav");
    global.SAVERESET = true;
    show_debug_message("Save file reset!");
    game_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
